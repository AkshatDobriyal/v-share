{"version":3,"sources":["serviceWorker.js","index.js","App.js","getWeb3.js","Navbar.js","profile.jpeg","Main.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsAPI","protocol","props","componentDidMount","a","getWeb3","web3","eth","getAccounts","accounts","console","log","setState","account","net","getId","networkId","DVideo","networks","contract","Contract","abi","methods","videoCount","call","i","videos","video","state","latest","currentHash","videoHash","currentTitle","videoTitle","loading","alert","error","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","uploadVideo","title","add","hash","send","from","on","changeVideo","bind","this","className","curremtHash","Component","Promise","resolve","reject","addEventListener","ethereum","Web3","enable","provider","providers","HttpProvider","Navbar","href","border","width","height","src","Profile","alt","float","substring","size","string","module","exports","Main","map","key","onClick","style","onSubmit","value","type","accept","onChange","id","ref","input","placeholder","required"],"mappings":"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","file":"static/js/main.8ad583e1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React, { Component } from \"react\";\r\nimport DVideo from \"./contracts/DVideo.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\nimport Navbar from \"./Navbar\";\r\nimport Main from \"./Main\";\r\nimport ipfsClient from 'ipfs-http-client';\r\n\r\nimport \"./App.css\";\r\n\r\n// Declare IPFS\r\nconst ipfsAPI = require('ipfs-api');\r\nconst ipfs = ipfsAPI('ipfs.infura.io', '5001', {protocol: 'https'});\r\n//const {create} = require('ipfs-http-client');\r\n//const ipfs = ipfsClient.create({host: 'ipfs.infura.io', port: 5001, protocol: 'https'});\r\n\r\n//const ipfsClient = require('ipfs-http-client')\r\n\r\n/*const projectId = '0c5867a6257c459daf419fdd0d30cd4b'\r\nconst projectSecret = '40fac51c5da94e4e919548431849c900'\r\nconst auth =\r\n  'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64')\r\n\r\nconst client = ipfsClient({\r\n  host: 'ipfs.infura.io',\r\n  port: 5001,\r\n  protocol: 'https',\r\n  headers: {\r\n    authorization: auth\r\n  }\r\n})\r\n*/\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = { \r\n      buffer: null,\r\n      videos: [],\r\n      loading: true,\r\n      currentHash: null,\r\n      currentTitle: null,\r\n      account: '',\r\n      web3: null,\r\n      accounts: null,\r\n      contract: null \r\n    };\r\n    this.uploadVideo = this.uploadVideo.bind(this);\r\n    this.captureFile = this.captureFile.bind(this);\r\n    this.changeVideo = this.changeVideo.bind(this);\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      const web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts();\r\n      console.log(accounts);\r\n      this.setState({ account: accounts[0] });\r\n\r\n      // Get the contract instance.\r\n      const networkId = await web3.eth.net.getId();\r\n      const networkData = DVideo.networks[networkId];\r\n      const contract = new web3.eth.Contract(DVideo.abi, '0xB61d32C9DC8Be21B589BAb8AF67FfC6723c597C6');\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.setState({ web3, accounts, contract });\r\n\r\n      const videoCount = await contract.methods.videoCount().call();\r\n      this.setState({ videoCount });\r\n\r\n      // load videos, sort by newest\r\n      for(var i=videoCount; i>0; i--){\r\n        const video = await contract.methods.videos(i).call();\r\n        this.setState({ \r\n          videos: [...this.state.videos, video]\r\n         })\r\n      }\r\n      // set the latest video with title to view as default\r\n      const latest = await contract.methods.videos(videoCount).call();\r\n      this.setState({\r\n        currentHash: latest.videoHash,\r\n        currentTitle: latest.videoTitle\r\n      })\r\n      this.setState({ loading: false });\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  captureFile = event => {\r\n    event.preventDefault();\r\n    const file = event.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.readAsArrayBuffer(file);\r\n\r\n    reader.onloadend = () => {\r\n      this.setState({buffer: Buffer(reader.result)});\r\n      console.log('buffer', this.state.buffer);\r\n    }\r\n  }\r\n\r\n  uploadVideo = title => {\r\n    console.log(\"Submitting file to IPFS...\");\r\n\r\n    //adding file to the IPFS\r\n    ipfs.files.add(this.state.buffer, (error, result) => {\r\n      console.log(\"IPFS result\", result);\r\n      if(error){\r\n        console.log(error);\r\n        return;\r\n      }\r\n      //this.state({loading: true});\r\n      this.state.contract.methods.uploadVideo(result[0].hash, title).send({from: this.state.account}).on('transactionHash', (hash) => {\r\n        //this.state({loading: false});\r\n      })\r\n    });\r\n  }\r\n\r\n  changeVideo = (hash, title) => {\r\n    this.setState({currentHash: hash});\r\n    this.setState({currentTitle: title});\r\n  }\r\n\r\n  /*runExample = async () => {\r\n    const { accounts, contract } = this.state;\r\n\r\n    // Stores a given value, 5 by default.\r\n    await contract.methods.set(5).send({ from: accounts[0] });\r\n\r\n    // Get the value from the contract to prove it worked.\r\n    const response = await contract.methods.get().call();\r\n\r\n    // Update state with the result.\r\n    this.setState({ storageValue: response });\r\n  };\r\n  */\r\n\r\n  render() {\r\n    if (!this.state.web3) {\r\n      return <div>Loading Web3, accounts, and contract...</div>;\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>DVIDEO</h1>\r\n        <Navbar account={this.state.account} />\r\n        <Main\r\n          videos={this.state.videos}\r\n          captureFile={this.captureFile}\r\n          changeVideo={this.changeVideo}\r\n          uploadVideo={this.uploadVideo}\r\n          currentHash={this.state.curremtHash}\r\n          currentTitle={this.state.currentTitle}  \r\n        />   \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Accounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:7545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import React, { Component } from \"react\";\r\nimport Identicon from \"react-identicons\";\r\nimport Profile from \"./profile.jpeg\";\r\nimport \"./App.css\";\r\n\r\nclass Navbar extends Component {\r\n\r\n    render() {\r\n        return (\r\n                <ul>\r\n                    <li>\r\n                        <a href=\"https://github.com/AkshatDobriyal\">\r\n                            <img  border= \"1px solid white\" width=\"40 rem\" height=\"40 rem\" src={Profile} alt=\"\" />&nbsp;AD\r\n                        </a>\r\n                    </li>\r\n        \r\n                    <li float=\"right\">\r\n                        <small>\r\n                            <a href={\"https://etherscan.io/address/\" + this.props.account}>\r\n                                {this.props.account ? this.props.account.substring(0, 6) + '...' + this.props.account.substring(36, 42) : '0x0'}\r\n                                {this.props.account\r\n                                    ? <Identicon size=\"40\" string={this.props.account}/>\r\n                                    : <span></span>\r\n                                }   \r\n                            </a>\r\n                        </small>\r\n                    </li>\r\n                </ul>\r\n            );\r\n    }\r\n}\r\n\r\nexport default Navbar;","module.exports = __webpack_public_path__ + \"static/media/profile.b5a88140.jpeg\";","import React, { Component } from 'react';\r\nimport \"./App.css\";\r\n\r\nclass Main extends Component {\r\n    render() {\r\n        return (\r\n            <div className='row'>\r\n                <div className='leftColumn'>\r\n                    <div className='car'>\r\n                        {this.props.videos.map((video, key) => {\r\n                            return(\r\n                                <div key={key}>\r\n                                    <small>{video.videoTitle}</small>\r\n                                    <p onClick={() => this.props.changeVideo(video.videoHash, video.videoTitle)}>\r\n                                        <video\r\n                                            src={`https://ipfs.infura.io/ipfs/${video.videoHash}`}\r\n                                            style={{width: '150px'}} />\r\n                                    </p>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n                <div className='rightColumn'>\r\n                    <div className='car'>\r\n                        <h3>Share Video</h3>\r\n                        <form onSubmit={(event) => {\r\n                            event.preventDefault();\r\n                            const title = this.videoTitle.value;\r\n                            this.props.uploadVideo(title);\r\n                        }}>\r\n                            &nbsp;\r\n                            <div className=\"choose\">\r\n                                <input type='file' accept=\".mp4, .mkv, .ogg, .wmv\" onChange={this.props.captureFile} style={{width: '250px'}} />\r\n                            </div>\r\n                            \r\n                            <br/><br/>\r\n                            <input className=\"input-video\"\r\n                                id=\"videoTitle\"\r\n                                type=\"text\"\r\n                                ref={(input) => {this.videoTitle = input}}\r\n                                placeholder=\"Title...\"\r\n                                required />\r\n                                <br/><br/>\r\n                            <button type=\"submit\" className=\"btn btn-primary\">Upload</button>\r\n                            &nbsp;\r\n\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;"],"sourceRoot":""}